class Solution {
  // public  int maxcount=0;
    int size=0;
    int infected=0;
    public void dfs(int src,ArrayList<Integer>[] adj, boolean [] vis,int[] initial){
        if(vis[src]==true)return;
        vis[src]=true;
         size++;
        if(Arrays.binarySearch(initial,src)>=0)infected++;
        for(int nbr:adj[src]){
            dfs(nbr,adj,vis,initial);
        }
   
    }
    public int minMalwareSpread(int[][] graph, int[] initial) {
        Arrays.sort(initial);
        ArrayList<Integer>[] adj=new ArrayList[graph.length];
        for(int i=0;i<graph.length;i++){
            adj[i]=new ArrayList<>();
            
        }
        
        for(int i=0;i<graph.length;i++){
            for(int j=0;j<graph[0].length;j++){
                if(i!=j&&graph[i][j]==1){
                    adj[i].add(j);
                }
            }
            // System.out.println(adj[i]);
        }
        // 1--2
        //     0 3
        // int init=0;
        int ans=initial[0];
        int maxcount=0;
        boolean [] vis =new boolean [graph.length];
        for(int i=0;i<initial.length;i++){
            size=0;                             
            infected=0;
            dfs(initial[i],adj,vis,initial);
            // System.out.println(initial[i]+" "+size);
                if(size>maxcount&&infected==1){
                    ans=initial[i];
                maxcount=size;
                    // init=i;
                }
            
        }
        
        return ans;
    }
}